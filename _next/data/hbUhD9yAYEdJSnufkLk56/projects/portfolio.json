{"pageProps":{"project":{"slug":"portfolio","title":"Portfolio-Blog","tech":["React","Next.js","Markdown","Sass"],"description":"Written with Next.js (SSG) and Markdown.","liveLink":"https://renebitter.github.io/portfolio","githubLink":"https://github.com/renebitter/portfolio","image":"portfolio.jpg","isFeatured":true,"content":"\n## Description\n\nPersonal portfolio and blog website.\n\n- Developed with Next.js using Static Site Generation.\n- Dynamic pages for projects and blog posts.\n- Blog posts and project details written in markdown and rendered with\n  react-markdown.\n- Framer motion, AOS and Swiper for the \"eye candy\".\n- Deployed with [\"Deploy to GitHub Pages\"](github.com/marketplace/actions/deploy-to-github-pages).\n\n## Key takeaways\n\nI've wanted to build a cool, or at least presentable, portfolio for a while now. Since I've been working a lot with Next.js lately, I figured it would be a great idea to build this portfolio using Next.js instead of some plain html/css/js. Because I wanted to write some blog posts as well, it would make sense to use Next.js due to its SEO advantages. And since I didn't want to pay for hosting just yet, Github Pages should do the trick.\n\nIt turned out to be not more complicated but bigger and more complex than expected. You can check out my blog post [<ins>here</ins>](/portfolio/posts/static-site-to-github-pages) where I go into detail about deploying this portfolio, but it might not be the best approach to deploy it, since github now supports direct deployment of static sites like this.\n\nThis is an evolving project, so there is some room for DRY improvement since things went another way as originally thought of. E.g. I started rendering posts with react-markdown and projects descriptions like this with JSON. After a while I decided to render project descriptions also with react-markdown.\n\n## Project Details\n\n### Project Diagram\n\n<iframe style=\"border:none\" width=\"100%\" height=\"550\" src=\"https://whimsical.com/embed/AWZSFKT3Fa9k2NRcFMPDH9\"></iframe>\n<br />\n<br />\n\n### Pages\n\n#### index\n\nGets static props for featuredPosts and featuredProjects and holds components of the main page.\n\n<details>\n\n  <summary>\n    <ins>View code</ins>\n    <span>\n      <i class=\"fa-solid fa-angle-right\"></i>\n    </span>\n  </summary>\n\n```jsx\nexport default function Home(props) {\n  return (\n    <>\n      <Head>\n        // <title>\n        // <meta/>\n      </Head>\n      <Hero />\n      <FeaturedProjects featuredProjects={props.featuredProjects} />\n      <FeaturedPosts posts={props.posts} />\n      <About />\n    </>\n  );\n}\n\nexport const getStaticProps = () => {\n  const featuredPosts = getFeaturedPosts();\n  const featuredProjects = getFeaturedProjects();\n\n  return {\n    props: {\n      posts: featuredPosts,\n      featuredProjects: featuredProjects,\n    },\n  };\n};\n```\n\n</details>\n<br />\n\n#### \\_app\n\nEncapsulates the whole app making components like Navbar and Footer available on all pages. Sets a default theme and takes in a theme change from the Navbar component.\n\n<details>\n\n  <summary>\n    <ins>View code</ins>\n    <span>\n      <i class=\"fa-solid fa-angle-right\"></i>\n    </span>\n  </summary>\n\n```jsx\nfunction MyApp({ Component, pageProps }) {\n  const [theme, setTheme] = useState('dark');\n  return (\n    <>\n      <div className='app' data-theme={theme}>\n        <Navbar theme={setTheme}>\n          <Head>\n            <meta\n              name='viewport'\n              content='width=device-width, initial-scale=1'\n            />\n            <link rel='shortcut icon' href='/portfolio/favicon.ico' />\n          </Head>\n          <Component {...pageProps} currentTheme={theme} />\n          <Footer />\n        </Navbar>\n      </div>\n    </>\n  );\n}\n```\n\n</details>\n<br />\n\n#### \\_document\n\nCustom 'Document' adds fonts and optimizes loading for all pages. The Head component used in '\\_document' is not the same as 'next/head'.\n\n<details>\n\n  <summary>\n    <ins>View code</ins>\n    <span>\n      <i class=\"fa-solid fa-angle-right\"></i>\n    </span>\n  </summary>\n\n```jsx\nimport Document, { Html, Head, Main, NextScript } from 'next/document';\n\nclass MyDocument extends Document {\n  render() {\n    return (\n      <Html lang='en'>\n        <Head>\n          <link rel='preconnect' href='https://fonts.googleapis.com' />\n          <link\n            rel='preconnect'\n            href='https://fonts.gstatic.com'\n            crossOrigin='anonymous'\n          />\n          <link\n            href='https://fonts.googleapis.com/css2?family=Fira+Code&family=Poppins&display=swap'\n            rel='stylesheet'\n          />\n\n          <link\n            rel='stylesheet'\n            href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css'\n            integrity='sha512-KfkfwYDsLkIlwQp6LFnl8zNdLGxu9YAA1QvwINks4PhcElQSvqcyVLLD9aMhXd13uQjoXtEKNosOWaZqXgel0g=='\n            crossOrigin='anonymous'\n            referrerPolicy='no-referrer'\n          />\n        </Head>\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n\nexport default MyDocument;\n```\n\n</details>\n<br />\n\n#### \\projects\\index\n\ngetStaticProps for all projects and sends props to AllProjects component.\n\n<details>\n\n  <summary>\n    <ins>View code</ins>\n    <span>\n      <i class=\"fa-solid fa-angle-right\"></i>\n    </span>\n  </summary>\n\n```jsx\nconst Projects = (props) => {\n  const { projects } = props;\n\n  return (\n    <>\n      // <Head>\n      <AllProjects projects={projects} />\n    </>\n  );\n};\nexport default Projects;\n\nexport const getStaticProps = (context) => {\n  const allProjects = getAllProjects();\n\n  return {\n    props: {\n      projects: allProjects,\n    },\n  };\n};\n```\n\n</details>\n<br />\n\n#### \\projects\\\\[slug]\n\ngetStaticProps & getStaticPaths for all dynamic pages and sends props to ProjectContent component.\n\ngetProjectsFiles() gets all markdown files in the data directory.\n\n'const slugs' maps through all markdown files and removes the '.md' extension and uses the file name as the slug.\n\n<details>\n\n  <summary>\n    <ins>View code</ins>\n    <span>\n      <i class=\"fa-solid fa-angle-right\"></i>\n    </span>\n  </summary>\n\n```jsx\nconst ProjectDetailPage = (props) => {\n  const { project, currentTheme } = props;\n\n  return (\n    <>\n      // <Head>\n      <ProjectContent project={project} currentTheme={currentTheme} />\n    </>\n  );\n};\n\nexport const getStaticProps = (context) => {\n  const { params } = context;\n  const { slug } = params;\n  const projectData = getProjectData(slug);\n\n  return {\n    props: {\n      project: projectData,\n    },\n    revalidate: 600,\n  };\n};\n\nexport const getStaticPaths = () => {\n  const projectsFilenames = getProjectsFiles();\n  const slugs = projectsFilenames.map((fileName) =>\n    fileName.replace(/\\.md$/, '')\n  );\n\n  return {\n    paths: slugs.map((slug) => ({ params: { slug: slug } })),\n    fallback: false,\n  };\n};\n\nexport default ProjectDetailPage;\n```\n\n</details>\n<br />\n\n### Components\n\n#### ProjectContent\n\nProjectContent explanation...\n\nRenders the content you are currently reading form the markdown file and sets theme for code snippets with 'const customRenderers'\n\n<details>\n\n  <summary>\n    <ins>View code</ins>\n    <span>\n      <i class=\"fa-solid fa-angle-right\"></i>\n    </span>\n  </summary>\n\n```jsx\nimport ReactMarkdown from 'react-markdown';\nimport rehypeRaw from 'rehype-raw';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport {\n  atomDark,\n  solarizedlight,\n} from 'react-syntax-highlighter/dist/cjs/styles/prism';\n\nimport Image from 'next/image';\nimport classes from './projectContent.module.scss';\nimport Link from 'next/link';\n\nimport { motion } from 'framer-motion';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Navigation } from 'swiper';\nimport 'swiper/css';\nimport 'swiper/css/pagination';\nimport 'swiper/css/navigation';\n\nconst ProjectContent = (props) => {\n  const { project, currentTheme } = props;\n  const content = project.content;\n\n  const customRenderers = {\n    code(code) {\n      const { className, children } = code;\n      const language = className.split('-')[1]; // className is something like language-js => We need the \"js\" part here\n\n      return (\n        <>\n          {currentTheme === 'dark' ? (\n            <SyntaxHighlighter\n              showLineNumbers\n              language={language}\n              style={atomDark}\n              // eslint-disable-next-line react/no-children-prop\n              children={children}\n            />\n          ) : (\n            <SyntaxHighlighter\n              showLineNumbers\n              language={language}\n              style={solarizedlight}\n              // eslint-disable-next-line react/no-children-prop\n              children={children}\n            />\n          )}\n        </>\n      );\n    },\n  };\n\n  return (\n    <div className={classes.projectDetail}>\n      <div className='container section mvh-100 projectDetail'>\n        <Link href='/projects/'>\n          <motion.button\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9 }}\n            className='btn btn-filled'>\n            View All Projects\n          </motion.button>\n        </Link>\n\n        <div className={classes.card}>\n          <div className={classes.projectLinks}>\n            {project.githubLink && (\n              <a href={project.githubLink} target='_blank' rel='noreferrer'>\n                <i className='fab fa-github'></i>\n                Github\n              </a>\n            )}\n            {project.liveLink && (\n              <a href={project.liveLink} target='_blank' rel='noreferrer'>\n                <i className='fas fa-link'></i>\n                Website\n              </a>\n            )}\n          </div>\n\n          <h1>{project.title}</h1>\n          <small>\n            {Array.isArray(project.tech)\n              ? project.tech.join(', ')\n              : project.tech}\n          </small>\n\n          {project.image && (\n            <div className={classes.projectImage}>\n              <Image\n                src={`../../portfolio/images/projects/${project.image}`}\n                width={500}\n                height={360}\n                alt=''\n              />\n            </div>\n          )}\n\n          <ReactMarkdown\n            components={customRenderers}\n            rehypePlugins={[rehypeRaw]}>\n            {content}\n          </ReactMarkdown>\n\n          {project.screenshots && (\n            <div className='mb-50'>\n              <h2>Screenshots</h2>\n              <Swiper\n                rewind={true}\n                grabCursor={true}\n                modules={[Navigation]}\n                navigation={true}\n                className='mySwiper'>\n                {project.screenshots.map((screenshot, index) => (\n                  <SwiperSlide key={index}>\n                    <Image\n                      src={`../../portfolio/images/projects/${project.slug}/${screenshot.screenshot}`}\n                      width={1000}\n                      height={700}\n                      alt={screenshot.description}\n                    />\n                    <div className={classes.description}>\n                      {index + 1}. {screenshot.description}\n                    </div>\n                  </SwiperSlide>\n                ))}\n              </Swiper>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectContent;\n```\n\n</details>\n<br />\n"}},"__N_SSG":true}