{"pageProps":{"post":{"slug":"markdown-blog","title":"Using Markdown as a blog format","date":"2022-04-03","image":"first-post.jpg","excerpt":"How to build a blog using react-markdown to render posts written in markdown","isFeatured":true,"tech":["Markdown"],"content":"\n# Using Markdown as a blog format\n\n![Image ...](/portfolio/images/posts/first-post/markdown.jpg)\n\n```text\n---\ntitle: 'Using Markdown as a blog format'\ndate: '2022-04-03'\nimage: first-post.jpg\nexcerpt: 'How to build a blog using react-markdown to render posts written in markdown'\nisFeatured: true\n---\n\n```\n\n```jsx\nimport ReactMarkdown from 'react-markdown';\nimport Image from 'next/image';\nimport classes from './postContent.module.scss';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { atomDark } from 'react-syntax-highlighter/dist/cjs/styles/prism';\n\nconst PostContent = (props) => {\n  const { post } = props;\n\n  const title = post.title;\n  const content = post.content;\n  const imagePath = `/portfolio/images/posts/${post.slug}/${post.image}`;\n\n  const customRenderers = {\n    p(paragraph) {\n      const { node } = paragraph;\n\n      if (node.children[0].tagName === 'img') {\n        const image = node.children[0];\n\n        return (\n          <div>\n            <Image src={imagePath} alt={image.alt} width={450} height={450} />\n          </div>\n        );\n      }\n\n      return <p>{paragraph.children}</p>;\n    },\n\n    code(code) {\n      const { className, children } = code;\n      const language = className.split('-')[1]; // className is something like language-js => We need the \"js\" part here\n\n      return (\n        <SyntaxHighlighter\n          language={language}\n          style={atomDark}\n          // eslint-disable-next-line react/no-children-prop\n          children={children}\n        />\n      );\n    },\n  };\n\n  return (\n    <div className={classes.postContent}>\n      <div className={classes.container}>\n        <article>\n          <ReactMarkdown components={customRenderers}>{content}</ReactMarkdown>\n        </article>\n      </div>\n    </div>\n  );\n};\n\nexport default PostContent;\n```\n"}},"__N_SSG":true}