{"pageProps":{"project":{"slug":"mernshop","title":"eCommerce website","tech":["React","Redux","MongoDB","Node","Express","Bootstrap"],"description":"Fullstack e-commerce website using the MERN stack and Redux.","liveLink":"https://mernshop-kk1f.onrender.com/","githubLink":"https://github.com/renebitter/mernshop","image":"mernshop.webp","isFeatured":true,"screenshots":[{"screenshot":"01-home.png","description":"Homepage with navbar and hero element."},{"screenshot":"02-home.png","description":"Homepage. Carousel with 3 top-rated products and general product listing."},{"screenshot":"03-home.png","description":"Homepage. Product listing and pagination."},{"screenshot":"04-product-detail-page.png","description":"Product detail page. Product description, review rating, price, stock status, quantity selector, add to cart button and review section."},{"screenshot":"06-cart-empty.png","description":"Empty cart."},{"screenshot":"05-cart-full.png","description":"Multiple products added to cart. Quantity selection and price updates."},{"screenshot":"07-shipping.png","description":"Shipping address."},{"screenshot":"08-payment.png","description":"Payment method selection."},{"screenshot":"09-order-summary.png","description":"Order summary including shipping address, payment method, order items, prices and total price."},{"screenshot":"10-order-payment.png","description":"Order payment."},{"screenshot":"11-order-paypal.png","description":"Paypal integration."},{"screenshot":"12-order-paid.png","description":"Order summary - paid."},{"screenshot":"14-sign-in.png","description":"Sign in."},{"screenshot":"15-register.png","description":"Sign up."},{"screenshot":"16-admin-user-list.png","description":"Admin user list."},{"screenshot":"17-admin-user-edit.png","description":"Admin user edit."},{"screenshot":"18-admin-product-list.png","description":"Admin product list."},{"screenshot":"19-admin-product-edit.png","description":"Admin product edit/create."},{"screenshot":"20-admin-order-list.png","description":"Admin order list."},{"screenshot":"21-admin-order-edit.png","description":"Admin order edit. Mark as delivered."},{"screenshot":"22-admin-order-edit-2.png","description":"Admin order delivered."},{"screenshot":"23-user-profile-orders.png","description":"User profile orders."},{"screenshot":"24-user-profile-order-delivered.png","description":"User profile order delivered."}],"content":"\n## Description\n\nFully functional and fullstack e-commerce website.\n\n- Includes pages from product listing, product detail page, to user login, payment, shipment, etc.\n- Admin area with CRUD functionality for users, products and orders.\n- Authentication handled with JWT.\n- Redux for state management.\n- MongoDB\n\n## Key takeaways\n\nThis is a complex project both in the backend and frontend.\nBesides all route and controller logic with authentication, CRUD\nand so on in the backend, my main takeaway for this project is the\nstate management with Redux in the frontend which is depicted in the diagram below.\n\n## Structure\n\nSee below the diagrams for both frontend and backend.\n<small>\\* Some code/components were omitted for simplicity matter (e.g. orderController).</small>\n\n### Frontend Diagram\n\n<iframe style=\"border:none\" width=\"100%\" height=\"550\" src=\"https://whimsical.com/embed/PMxfFafALUS8a2DTdF6ogt\"></iframe>\n<br />\n\n#### Store\n\nCombines all reducers and apply thunk (middleware that allows\nyou to return functions).\n\n<details>\n\n  <summary>\n    <ins>View code</ins>\n    <span>\n      <i class=\"fa-solid fa-angle-right\"></i>\n    </span>\n  </summary>\n\n```js\nconst reducer = combineReducers({\n  productList: productListReducer,\n  //followed by all other reducers...\n});\n\nconst cartItemsFromStorage = localStorage.getItem('cartItems')\n  ? JSON.parse(localStorage.getItem('cartItems'))\n  : [];\n\n//followed by other localStorage variables...\n\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAddress: shippingAddressFromStorage,\n  },\n  userLogin: { userInfo: userInfoFromStorage },\n};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  reducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n```\n\n</details>\n<br />\n\n#### Thunk\n\nRedux Thunk is middleware that allows you to return functions, rather than just actions, within Redux. This allows for delayed actions, including working with promises. One of the main use cases for this middleware is handling asynchronous actions like using axios to send a GET request as seen in the Actions API call.\n\n#### Constants\n\nJust holds the constants names. The cases are: REQUEST, SUCCESS, FAIL, RESET.\n\n#### Actions\n\nUsing async try/catch it fetches APIs and dispatches a type (e.g. REQUEST, SUCCESS, FAIL, RESET) that hits a Switch Case in the Reducer.\n\n<details>\n\n  <summary>\n    <ins>View code</ins>\n    <span>\n      <i class=\"fa-solid fa-angle-right\"></i>\n    </span>\n  </summary>\n\n```jsx\nexport const listProducts =\n  (keyword = '', pageNumber = '') =>\n  async (dispatch) => {\n    try {\n      dispatch({\n        type: PRODUCT_LIST_REQUEST,\n      });\n\n      const { data } = await axios.get(\n        `/api/products?keyword=${keyword}&pageNumber=${pageNumber}`\n      );\n\n      dispatch({\n        type: PRODUCT_LIST_SUCCESS,\n        payload: data,\n      });\n    } catch (error) {\n      dispatch({\n        type: PRODUCT_LIST_FAIL,\n        payload:\n          error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message,\n      });\n    }\n  };\n```\n\n</details>\n<br />\n\n#### Reducers\n\nTakes previous state and action with its Switch Case and returns next state.\n\n<details>\n\n  <summary>\n    <ins>View code</ins>\n    <span>\n      <i class=\"fa-solid fa-angle-right\"></i>\n    </span>\n  </summary>\n\n```jsx\nexport const productListReducer = (state = { products: [] }, action) => {\n  switch (action.type) {\n    case PRODUCT_LIST_REQUEST:\n      return { loading: true, products: [] };\n    case PRODUCT_LIST_SUCCESS:\n      return {\n        loading: false,\n        products: action.payload.products,\n        pages: action.payload.pages,\n        page: action.payload.page,\n      };\n    case PRODUCT_LIST_FAIL:\n      return { loading: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n```\n\n</details>\n<br />\n\n#### Screens\n\nuseDispatch & useSelector are both Redux Hooks.<br />\nuseDispatch will trigger the action and useSelector will receive the state.\n\n#### Components\n\nSome components also use Redux, like ProductCarousel and Header.\n\n### Backend Diagram\n\n<iframe style=\"border:none\" width=\"100%\" height=\"550\" src=\"https://whimsical.com/embed/aqVxiWzGmMuuHVkkEmWH4\"></iframe>\n<br />\n\n#### Server\n\nThe heart of the backend application. Connects to the DB via\nconfig/db and uses all routes made available by routes (order,\nproduct, user, upload) and error handling directly from the\nmiddleware.\n\n#### Config/db\n\nMakes the connection to the database.\n\n#### Routes\n\nBest regarded as Endpoints. Route methods (get, post, put,\ndelete) are defined for the specified route and used in\nconjunction with a controller and middleware functions, which\nhold the logic. (e.g. router.post(&apos;/login&apos;,\nauthUser))\n\n#### Controllers\n\nBest regarded as the application logic. The functions defined\nhere will be requested when hitting the defined\nroutes/endpoints. It is the place where the logic for a given\nroute is applied.\n\n#### Middleware\n\nEither called directly from server.js for errorHandling or\nfrom a given route, in this case userRoute, for both protect\nand isAdmin functions. protect will make sure that the user is\nlogged in by verifying their bearer token (which is generated\nby the util). isAdmin will make sure that the given user has\nadmin rights.\n\n#### Utils\n\nGenerates a token which is called from the userController.\n(e.g. when logging in a user)\n\n#### Models\n\nDefines the DB schema for a given model. userModal.js also\nuses bcrypt to compare and hash passwords.\n"}},"__N_SSG":true}