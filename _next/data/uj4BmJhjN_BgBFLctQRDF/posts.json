{"pageProps":{"posts":[{"slug":"static-site-to-github-pages","title":"How to deploy a static Next.js website on Github Pages","date":"2022-06-23","image":"github-01.png","excerpt":"In this post I go through the steps to deploy my Portfolio-Blog developed with Next.js on Github. By the end of it you will be able to automate the deployment by each new commit to the repository.","isFeatured":true,"tech":["Next.js"],"content":"\n# How to deploy a static Next.js website on Github Pages\n\n![Image ...](/portfolio/images/posts/static-site-to-github-pages/github.jpg)\n\n##### Using Next.js version 12.1.6\n\n##### 2022-06-23\n\nUpdate: Since July 27th, this procedure can be done completely by github without a third party solution. [github.blog](https://github.blog/changelog/2022-07-27-github-pages-custom-github-actions-workflows-beta/)\n\n## Introduction\n\nI've wanted to build a cool, or at least presentable, Portfolio-Blog for a while now. Since I've been working a lot with Next.js lately, I figured it would be a great idea to build this portfolio using Next.js instead of some plain html/css/js. And since I didn't want to pay for hosting just right now, Github Pages should do the trick.\n\nThe original idea was to **next build** and **next export** the project and then manually upload the generated files to a repository. Since this didn't work the way I was thinking, I searched and found an even better solution. This involves using Github Actions and a third party CI/CD solution available at Github Marketplace. The one I used is [\"Deploy to Github Pages\"](https://github.com/marketplace/actions/deploy-to-github-pages).\n\n### 1. Github Actions\n\n1. In your repository go to actions and add a workflow by choosing Node.js:\n\n   ![Image ...](/portfolio/images/posts/static-site-to-github-pages/github-actions-01.jpg)\n\n2. You'll get a **node.js.yml** file like the one bellow:\n\n   ```yml\n   # This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node\n   # For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\n   name: Node.js CI\n\n   on:\n     push:\n       branches: ['main']\n     pull_request:\n       branches: ['main']\n\n     jobs:\n     build:\n\n     runs-on: ubuntu-latest\n\n     strategy:\n       matrix:\n         node-version: [12.x, 14.x, 16.x]\n         # See supported Node.js release schedule at https://nodejs.org/en/about/releases/\n\n     steps:\n       - uses: actions/checkout@v3\n       - name: Use Node.js ${{ matrix.node-version }}\n         uses: actions/setup-node@v3\n         with:\n           node-version: ${{ matrix.node-version }}\n           cache: 'npm'\n       - run: npm ci\n       - run: npm run build --if-present\n       - run: npm test\n   ```\n\n3. Select the node version e.g. **node-version: [16.x]** then start replacing at **- run: npm ci** like the code below. Since I'm using **yarn** I also changed the respective **npm** commands. For example: **run: yarn install --frozen-lockfile** is equivalent to **run: npm ci**.\n\n   We also need to bypass Jekyll since it doesn't recognize folders that start with an underscore, like \"\\_next\". More about bypassing Jekyll on Github [Github Blog](https://github.blog/2009-12-29-bypassing-jekyll-on-github-pages/) and [Stackoverflow](https://stackoverflow.com/questions/61450307/js-and-css-not-loading-when-hosting-next-application-on-github-pages).\n\n   The section starting with **- name: Deploy** is the [\"Deploy to Github Pages\"](https://github.com/marketplace/actions/deploy-to-github-pages).\n\n   ```yml\n   - run: npm install -g yarn # Installs yarn.\n   - run: yarn install --frozen-lockfile # Performs a clean install.\n   - run: yarn build && export # Generates and exports files into \"out\" folder.\n   - run: touch ./out/.nojekyll # This bypasses Github's Jekyll since it doesn't recognize folders that start with an underscore, like \"_next\".\n\n   - name: Deploy\n     uses: JamesIves/github-pages-deploy-action@v4.3.3\n     with:\n       branch: gh-pages # The branch the action should deploy to.\n       folder: out # The folder the action should deploy.\n   ```\n\n4. The content of the folder **out** is then deployed to the **gh-pages** branch, which is then used by Github Pages.\n\n### 2. Next.js config\n\n#### - Custom image loader & basePath\n\n1. In the Next.js application, we need to change the **next.config.js** file. We need to add a custom image loader since the standard one doesn't support **next export** which you can see in the error message bellow. More about built-in image loaders [official doc](https://nextjs.org/docs/api-reference/next/image#loader-configuration). This was a trial and error and the one that worked for me was the \"akamai\".\n\n   Error message:\n\n   ```txt\n   Error: Image Optimization using Next.js' default loader is not compatible with `next export`.\n     Possible solutions:\n       - Use `next start` to run a server, which includes the Image Optimization API.\n       - Use any provider which supports Image Optimization (like Vercel).\n       - Configure a third-party loader in `next.config.js`.\n       - Use the `loader` prop for `next/image`.\n     Read more: https://nextjs.org/docs/messages/export-image-api\n   ```\n\n   next.config.js:\n\n   ```js\n   /** @type {import('next').NextConfig} */\n   const isProd = process.env.NODE_ENV === 'production';\n   const nextConfig = {\n     reactStrictMode: true,\n     images: {\n       loader: 'akamai',\n       path: isProd ? 'https://<your github account>.github.io/' : '',\n     },\n     basePath: '/<your github repo>',\n   };\n\n   module.exports = nextConfig;\n   ```\n\n2. As seen above, you also need to define a **basePath**. The reason behind it is that images/assets will not load because your repository name will be part of the URL. There is another option called [assetPrefix](https://nextjs.org/docs/api-reference/next.config.js/cdn-support-with-asset-prefix) but it is discouraged. By the way you can also use a **isProduction** variable like this:\n\n   next.config.js:\n\n   ```js\n   const isProd = process.env.NODE_ENV === 'production';\n   //and then something like this ternary :\n   basePath: isProd ? '/<your github repo>' : '',\n   ```\n\n#### - Changing Image src\n\n1. Replace each image src as described in the [official docs](https://nextjs.org/docs/api-reference/next.config.js/basepath#images)\n\n   ```jsx\n   <Image\n     src='/images/profile-pic.png'\n     width={360}\n     height={360}\n     alt='profile-pic'\n   />\n   ```\n\n   ```jsx\n   <Image\n     src='/<your github repo>/images/profile-pic.png'\n     width={360}\n     height={360}\n     alt='profile-pic'\n   />\n   ```\n\nThanks for following until here and I hope it helps you too!\n"},{"slug":"markdown-blog","title":"Using Markdown as a blog format","date":"2022-04-03","image":"first-post.jpg","excerpt":"How to build a blog using react-markdown to render posts written in markdown","isFeatured":true,"tech":["Markdown"],"content":"\n# Using Markdown as a blog format\n\n![Image ...](/portfolio/images/posts/first-post/markdown.jpg)\n\n```text\n---\ntitle: 'Using Markdown as a blog format'\ndate: '2022-04-03'\nimage: first-post.jpg\nexcerpt: 'How to build a blog using react-markdown to render posts written in markdown'\nisFeatured: true\n---\n\n```\n\n```jsx\nimport ReactMarkdown from 'react-markdown';\nimport Image from 'next/image';\nimport classes from './postContent.module.scss';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { atomDark } from 'react-syntax-highlighter/dist/cjs/styles/prism';\n\nconst PostContent = (props) => {\n  const { post } = props;\n\n  const title = post.title;\n  const content = post.content;\n  const imagePath = `/portfolio/images/posts/${post.slug}/${post.image}`;\n\n  const customRenderers = {\n    p(paragraph) {\n      const { node } = paragraph;\n\n      if (node.children[0].tagName === 'img') {\n        const image = node.children[0];\n\n        return (\n          <div>\n            <Image src={imagePath} alt={image.alt} width={450} height={450} />\n          </div>\n        );\n      }\n\n      return <p>{paragraph.children}</p>;\n    },\n\n    code(code) {\n      const { className, children } = code;\n      const language = className.split('-')[1]; // className is something like language-js => We need the \"js\" part here\n\n      return (\n        <SyntaxHighlighter\n          language={language}\n          style={atomDark}\n          // eslint-disable-next-line react/no-children-prop\n          children={children}\n        />\n      );\n    },\n  };\n\n  return (\n    <div className={classes.postContent}>\n      <div className={classes.container}>\n        <article>\n          <ReactMarkdown components={customRenderers}>{content}</ReactMarkdown>\n        </article>\n      </div>\n    </div>\n  );\n};\n\nexport default PostContent;\n```\n"}]},"__N_SSG":true}