{"pageProps":{"projects":[{"slug":"mernshop","title":"eCommerce website","tech":["React","Redux","MongoDB","Node","Express","Bootstrap"],"description":"Fullstack e-commerce website using the MERN stack and Redux.","liveLink":"https://mernshop-kk1f.onrender.com/","githubLink":"https://github.com/renebitter/mernshop","image":"mernshop.webp","isFeatured":true,"screenshots":[{"screenshot":"01-home.png","description":"Homepage with navbar and hero element."},{"screenshot":"02-home.png","description":"Homepage. Carousel with 3 top-rated products and general product listing."},{"screenshot":"03-home.png","description":"Homepage. Product listing and pagination."},{"screenshot":"04-product-detail-page.png","description":"Product detail page. Product description, review rating, price, stock status, quantity selector, add to cart button and review section."},{"screenshot":"06-cart-empty.png","description":"Empty cart."},{"screenshot":"05-cart-full.png","description":"Multiple products added to cart. Quantity selection and price updates."},{"screenshot":"07-shipping.png","description":"Shipping address."},{"screenshot":"08-payment.png","description":"Payment method selection."},{"screenshot":"09-order-summary.png","description":"Order summary including shipping address, payment method, order items, prices and total price."},{"screenshot":"10-order-payment.png","description":"Order payment."},{"screenshot":"11-order-paypal.png","description":"Paypal integration."},{"screenshot":"12-order-paid.png","description":"Order summary - paid."},{"screenshot":"14-sign-in.png","description":"Sign in."},{"screenshot":"15-register.png","description":"Sign up."},{"screenshot":"16-admin-user-list.png","description":"Admin user list."},{"screenshot":"17-admin-user-edit.png","description":"Admin user edit."},{"screenshot":"18-admin-product-list.png","description":"Admin product list."},{"screenshot":"19-admin-product-edit.png","description":"Admin product edit/create."},{"screenshot":"20-admin-order-list.png","description":"Admin order list."},{"screenshot":"21-admin-order-edit.png","description":"Admin order edit. Mark as delivered."},{"screenshot":"22-admin-order-edit-2.png","description":"Admin order delivered."},{"screenshot":"23-user-profile-orders.png","description":"User profile orders."},{"screenshot":"24-user-profile-order-delivered.png","description":"User profile order delivered."}],"content":"\n## Description\n\nFully functional and fullstack e-commerce website.\n\n- Includes pages from product listing, product detail page, to user login, payment, shipment, etc.\n- Admin area with CRUD functionality for users, products and orders.\n- Authentication handled with JWT.\n- Redux for state management.\n- MongoDB\n\n## Key takeaways\n\nThis is a complex project both in the backend and frontend.\nBesides all route and controller logic with authentication, CRUD\nand so on in the backend, my main takeaway for this project is the\nstate management with Redux in the frontend which is depicted in the diagram below.\n\n## Structure\n\nSee below the diagrams for both frontend and backend.\n<small>\\* Some code/components were omitted for simplicity matter (e.g. orderController).</small>\n\n### Frontend Diagram\n\n<iframe style=\"border:none\" width=\"100%\" height=\"550\" src=\"https://whimsical.com/embed/PMxfFafALUS8a2DTdF6ogt\"></iframe>\n<br />\n\n#### Store\n\nCombines all reducers and apply thunk (middleware that allows\nyou to return functions).\n\n<details>\n\n  <summary>\n    <ins>View code</ins>\n    <span>\n      <i class=\"fa-solid fa-angle-right\"></i>\n    </span>\n  </summary>\n\n```js\nconst reducer = combineReducers({\n  productList: productListReducer,\n  //followed by all other reducers...\n});\n\nconst cartItemsFromStorage = localStorage.getItem('cartItems')\n  ? JSON.parse(localStorage.getItem('cartItems'))\n  : [];\n\n//followed by other localStorage variables...\n\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAddress: shippingAddressFromStorage,\n  },\n  userLogin: { userInfo: userInfoFromStorage },\n};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  reducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n```\n\n</details>\n<br />\n\n#### Thunk\n\nRedux Thunk is middleware that allows you to return functions, rather than just actions, within Redux. This allows for delayed actions, including working with promises. One of the main use cases for this middleware is handling asynchronous actions like using axios to send a GET request as seen in the Actions API call.\n\n#### Constants\n\nJust holds the constants names. The cases are: REQUEST, SUCCESS, FAIL, RESET.\n\n#### Actions\n\nUsing async try/catch it fetches APIs and dispatches a type (e.g. REQUEST, SUCCESS, FAIL, RESET) that hits a Switch Case in the Reducer.\n\n<details>\n\n  <summary>\n    <ins>View code</ins>\n    <span>\n      <i class=\"fa-solid fa-angle-right\"></i>\n    </span>\n  </summary>\n\n```jsx\nexport const listProducts =\n  (keyword = '', pageNumber = '') =>\n  async (dispatch) => {\n    try {\n      dispatch({\n        type: PRODUCT_LIST_REQUEST,\n      });\n\n      const { data } = await axios.get(\n        `/api/products?keyword=${keyword}&pageNumber=${pageNumber}`\n      );\n\n      dispatch({\n        type: PRODUCT_LIST_SUCCESS,\n        payload: data,\n      });\n    } catch (error) {\n      dispatch({\n        type: PRODUCT_LIST_FAIL,\n        payload:\n          error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message,\n      });\n    }\n  };\n```\n\n</details>\n<br />\n\n#### Reducers\n\nTakes previous state and action with its Switch Case and returns next state.\n\n<details>\n\n  <summary>\n    <ins>View code</ins>\n    <span>\n      <i class=\"fa-solid fa-angle-right\"></i>\n    </span>\n  </summary>\n\n```jsx\nexport const productListReducer = (state = { products: [] }, action) => {\n  switch (action.type) {\n    case PRODUCT_LIST_REQUEST:\n      return { loading: true, products: [] };\n    case PRODUCT_LIST_SUCCESS:\n      return {\n        loading: false,\n        products: action.payload.products,\n        pages: action.payload.pages,\n        page: action.payload.page,\n      };\n    case PRODUCT_LIST_FAIL:\n      return { loading: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n```\n\n</details>\n<br />\n\n#### Screens\n\nuseDispatch & useSelector are both Redux Hooks.<br />\nuseDispatch will trigger the action and useSelector will receive the state.\n\n#### Components\n\nSome components also use Redux, like ProductCarousel and Header.\n\n### Backend Diagram\n\n<iframe style=\"border:none\" width=\"100%\" height=\"550\" src=\"https://whimsical.com/embed/aqVxiWzGmMuuHVkkEmWH4\"></iframe>\n<br />\n\n#### Server\n\nThe heart of the backend application. Connects to the DB via\nconfig/db and uses all routes made available by routes (order,\nproduct, user, upload) and error handling directly from the\nmiddleware.\n\n#### Config/db\n\nMakes the connection to the database.\n\n#### Routes\n\nBest regarded as Endpoints. Route methods (get, post, put,\ndelete) are defined for the specified route and used in\nconjunction with a controller and middleware functions, which\nhold the logic. (e.g. router.post(&apos;/login&apos;,\nauthUser))\n\n#### Controllers\n\nBest regarded as the application logic. The functions defined\nhere will be requested when hitting the defined\nroutes/endpoints. It is the place where the logic for a given\nroute is applied.\n\n#### Middleware\n\nEither called directly from server.js for errorHandling or\nfrom a given route, in this case userRoute, for both protect\nand isAdmin functions. protect will make sure that the user is\nlogged in by verifying their bearer token (which is generated\nby the util). isAdmin will make sure that the given user has\nadmin rights.\n\n#### Utils\n\nGenerates a token which is called from the userController.\n(e.g. when logging in a user)\n\n#### Models\n\nDefines the DB schema for a given model. userModal.js also\nuses bcrypt to compare and hash passwords.\n"},{"slug":"portfolio","title":"Portfolio-Blog","tech":["React","Next.js","Markdown","Sass"],"description":"Written with Next.js (SSG) and Markdown.","liveLink":"https://renebitter.github.io/portfolio","githubLink":"https://github.com/renebitter/portfolio","image":"portfolio.jpg","isFeatured":true,"content":"\n## Description\n\nPersonal portfolio and blog website.\n\n- Developed with Next.js using Static Site Generation.\n- Dynamic pages for projects and blog posts.\n- Blog posts and project details written in markdown and rendered with\n  react-markdown.\n- Framer motion, AOS and Swiper for the \"eye candy\".\n- Deployed with [\"Deploy to GitHub Pages\"](github.com/marketplace/actions/deploy-to-github-pages).\n\n## Key takeaways\n\nI've wanted to build a cool, or at least presentable, portfolio for a while now. Since I've been working a lot with Next.js lately, I figured it would be a great idea to build this portfolio using Next.js instead of some plain html/css/js. Because I wanted to write some blog posts as well, it would make sense to use Next.js due to its SEO advantages. And since I didn't want to pay for hosting just yet, Github Pages should do the trick.\n\nIt turned out to be not more complicated but bigger and more complex than expected. You can check out my blog post [<ins>here</ins>](/portfolio/posts/static-site-to-github-pages) where I go into detail about deploying this portfolio, but it might not be the best approach to deploy it, since github now supports direct deployment of static sites like this.\n\nThis is an evolving project, so there is some room for DRY improvement since things went another way as originally thought of. E.g. I started rendering posts with react-markdown and projects descriptions like this with JSON. After a while I decided to render project descriptions also with react-markdown.\n\n## Project Details\n\n### Project Diagram\n\n<iframe style=\"border:none\" width=\"100%\" height=\"550\" src=\"https://whimsical.com/embed/AWZSFKT3Fa9k2NRcFMPDH9\"></iframe>\n<br />\n<br />\n\n### Pages\n\n#### index\n\nGets static props for featuredPosts and featuredProjects and holds components of the main page.\n\n<details>\n\n  <summary>\n    <ins>View code</ins>\n    <span>\n      <i class=\"fa-solid fa-angle-right\"></i>\n    </span>\n  </summary>\n\n```jsx\nexport default function Home(props) {\n  return (\n    <>\n      <Head>\n        // <title>\n        // <meta/>\n      </Head>\n      <Hero />\n      <FeaturedProjects featuredProjects={props.featuredProjects} />\n      <FeaturedPosts posts={props.posts} />\n      <About />\n    </>\n  );\n}\n\nexport const getStaticProps = () => {\n  const featuredPosts = getFeaturedPosts();\n  const featuredProjects = getFeaturedProjects();\n\n  return {\n    props: {\n      posts: featuredPosts,\n      featuredProjects: featuredProjects,\n    },\n  };\n};\n```\n\n</details>\n<br />\n\n#### \\_app\n\nEncapsulates the whole app making components like Navbar and Footer available on all pages. Sets a default theme and takes in a theme change from the Navbar component.\n\n<details>\n\n  <summary>\n    <ins>View code</ins>\n    <span>\n      <i class=\"fa-solid fa-angle-right\"></i>\n    </span>\n  </summary>\n\n```jsx\nfunction MyApp({ Component, pageProps }) {\n  const [theme, setTheme] = useState('dark');\n  return (\n    <>\n      <div className='app' data-theme={theme}>\n        <Navbar theme={setTheme}>\n          <Head>\n            <meta\n              name='viewport'\n              content='width=device-width, initial-scale=1'\n            />\n            <link rel='shortcut icon' href='/portfolio/favicon.ico' />\n          </Head>\n          <Component {...pageProps} currentTheme={theme} />\n          <Footer />\n        </Navbar>\n      </div>\n    </>\n  );\n}\n```\n\n</details>\n<br />\n\n#### \\_document\n\nCustom 'Document' adds fonts and optimizes loading for all pages. The Head component used in '\\_document' is not the same as 'next/head'.\n\n<details>\n\n  <summary>\n    <ins>View code</ins>\n    <span>\n      <i class=\"fa-solid fa-angle-right\"></i>\n    </span>\n  </summary>\n\n```jsx\nimport Document, { Html, Head, Main, NextScript } from 'next/document';\n\nclass MyDocument extends Document {\n  render() {\n    return (\n      <Html lang='en'>\n        <Head>\n          <link rel='preconnect' href='https://fonts.googleapis.com' />\n          <link\n            rel='preconnect'\n            href='https://fonts.gstatic.com'\n            crossOrigin='anonymous'\n          />\n          <link\n            href='https://fonts.googleapis.com/css2?family=Fira+Code&family=Poppins&display=swap'\n            rel='stylesheet'\n          />\n\n          <link\n            rel='stylesheet'\n            href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css'\n            integrity='sha512-KfkfwYDsLkIlwQp6LFnl8zNdLGxu9YAA1QvwINks4PhcElQSvqcyVLLD9aMhXd13uQjoXtEKNosOWaZqXgel0g=='\n            crossOrigin='anonymous'\n            referrerPolicy='no-referrer'\n          />\n        </Head>\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n\nexport default MyDocument;\n```\n\n</details>\n<br />\n\n#### \\projects\\index\n\ngetStaticProps for all projects and sends props to AllProjects component.\n\n<details>\n\n  <summary>\n    <ins>View code</ins>\n    <span>\n      <i class=\"fa-solid fa-angle-right\"></i>\n    </span>\n  </summary>\n\n```jsx\nconst Projects = (props) => {\n  const { projects } = props;\n\n  return (\n    <>\n      // <Head>\n      <AllProjects projects={projects} />\n    </>\n  );\n};\nexport default Projects;\n\nexport const getStaticProps = (context) => {\n  const allProjects = getAllProjects();\n\n  return {\n    props: {\n      projects: allProjects,\n    },\n  };\n};\n```\n\n</details>\n<br />\n\n#### \\projects\\\\[slug]\n\ngetStaticProps & getStaticPaths for all dynamic pages and sends props to ProjectContent component.\n\ngetProjectsFiles() gets all markdown files in the data directory.\n\n'const slugs' maps through all markdown files and removes the '.md' extension and uses the file name as the slug.\n\n<details>\n\n  <summary>\n    <ins>View code</ins>\n    <span>\n      <i class=\"fa-solid fa-angle-right\"></i>\n    </span>\n  </summary>\n\n```jsx\nconst ProjectDetailPage = (props) => {\n  const { project, currentTheme } = props;\n\n  return (\n    <>\n      // <Head>\n      <ProjectContent project={project} currentTheme={currentTheme} />\n    </>\n  );\n};\n\nexport const getStaticProps = (context) => {\n  const { params } = context;\n  const { slug } = params;\n  const projectData = getProjectData(slug);\n\n  return {\n    props: {\n      project: projectData,\n    },\n    revalidate: 600,\n  };\n};\n\nexport const getStaticPaths = () => {\n  const projectsFilenames = getProjectsFiles();\n  const slugs = projectsFilenames.map((fileName) =>\n    fileName.replace(/\\.md$/, '')\n  );\n\n  return {\n    paths: slugs.map((slug) => ({ params: { slug: slug } })),\n    fallback: false,\n  };\n};\n\nexport default ProjectDetailPage;\n```\n\n</details>\n<br />\n\n### Components\n\n#### ProjectContent\n\nProjectContent explanation...\n\nRenders the content you are currently reading form the markdown file and sets theme for code snippets with 'const customRenderers'\n\n<details>\n\n  <summary>\n    <ins>View code</ins>\n    <span>\n      <i class=\"fa-solid fa-angle-right\"></i>\n    </span>\n  </summary>\n\n```jsx\nimport ReactMarkdown from 'react-markdown';\nimport rehypeRaw from 'rehype-raw';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport {\n  atomDark,\n  solarizedlight,\n} from 'react-syntax-highlighter/dist/cjs/styles/prism';\n\nimport Image from 'next/image';\nimport classes from './projectContent.module.scss';\nimport Link from 'next/link';\n\nimport { motion } from 'framer-motion';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Navigation } from 'swiper';\nimport 'swiper/css';\nimport 'swiper/css/pagination';\nimport 'swiper/css/navigation';\n\nconst ProjectContent = (props) => {\n  const { project, currentTheme } = props;\n  const content = project.content;\n\n  const customRenderers = {\n    code(code) {\n      const { className, children } = code;\n      const language = className.split('-')[1]; // className is something like language-js => We need the \"js\" part here\n\n      return (\n        <>\n          {currentTheme === 'dark' ? (\n            <SyntaxHighlighter\n              showLineNumbers\n              language={language}\n              style={atomDark}\n              // eslint-disable-next-line react/no-children-prop\n              children={children}\n            />\n          ) : (\n            <SyntaxHighlighter\n              showLineNumbers\n              language={language}\n              style={solarizedlight}\n              // eslint-disable-next-line react/no-children-prop\n              children={children}\n            />\n          )}\n        </>\n      );\n    },\n  };\n\n  return (\n    <div className={classes.projectDetail}>\n      <div className='container section mvh-100 projectDetail'>\n        <Link href='/projects/'>\n          <motion.button\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9 }}\n            className='btn btn-filled'>\n            View All Projects\n          </motion.button>\n        </Link>\n\n        <div className={classes.card}>\n          <div className={classes.projectLinks}>\n            {project.githubLink && (\n              <a href={project.githubLink} target='_blank' rel='noreferrer'>\n                <i className='fab fa-github'></i>\n                Github\n              </a>\n            )}\n            {project.liveLink && (\n              <a href={project.liveLink} target='_blank' rel='noreferrer'>\n                <i className='fas fa-link'></i>\n                Website\n              </a>\n            )}\n          </div>\n\n          <h1>{project.title}</h1>\n          <small>\n            {Array.isArray(project.tech)\n              ? project.tech.join(', ')\n              : project.tech}\n          </small>\n\n          {project.image && (\n            <div className={classes.projectImage}>\n              <Image\n                src={`../../portfolio/images/projects/${project.image}`}\n                width={500}\n                height={360}\n                alt=''\n              />\n            </div>\n          )}\n\n          <ReactMarkdown\n            components={customRenderers}\n            rehypePlugins={[rehypeRaw]}>\n            {content}\n          </ReactMarkdown>\n\n          {project.screenshots && (\n            <div className='mb-50'>\n              <h2>Screenshots</h2>\n              <Swiper\n                rewind={true}\n                grabCursor={true}\n                modules={[Navigation]}\n                navigation={true}\n                className='mySwiper'>\n                {project.screenshots.map((screenshot, index) => (\n                  <SwiperSlide key={index}>\n                    <Image\n                      src={`../../portfolio/images/projects/${project.slug}/${screenshot.screenshot}`}\n                      width={1000}\n                      height={700}\n                      alt={screenshot.description}\n                    />\n                    <div className={classes.description}>\n                      {index + 1}. {screenshot.description}\n                    </div>\n                  </SwiperSlide>\n                ))}\n              </Swiper>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectContent;\n```\n\n</details>\n<br />\n"},{"slug":"shopware","title":"Shopware","tech":["Shopware","Bootstrap","Twig","Smarty"],"description":"Shopware 6 source code and many other SW5 & SW6 projects.","githubLink":"https://github.com/shopware/platform","image":"shopware.png","isFeatured":true,"content":"\n## Description\n\nShopware is a modular, highly customizable open-source e-commerce platform.\n\nI worked on the development of [<ins>Shopware 6 source code</ins>](https://github.com/shopware/platform) and many other Shopware 5 and 6 projects for mid and large size B2B and B2C clients in Germany. My work consisted in developing and testing the Frontend using the template engines Smarty (SW5) and Twig (SW6) as well as jQuery, ES6, Bootstrap, LESS and SASS. Docker and Vagrant for local development.\n\nSome of the shops I worked on:<br/>\n[<ins>krieg-online.de</ins>](https://krieg-online.de/)<br/>\n[<ins>shop.tila-lachenmaier.de</ins>](https://shop.tila-lachenmaier.de/)<br/>\n[<ins>badischer-winzerkeller.de</ins>](https://www.badischer-winzerkeller.de/)<br/>\n[<ins>erima.de</ins>](https://www.erima.de/)<br/>\n[<ins>digel.de</ins>](https://www.digel.de/)<br/>\n"},{"slug":"contact-keeper","title":"Contact Keeper","tech":["React","MongoDB","Node","Express","Context"],"description":"This is a MERN Fullstack project with authentication and CRUD functionality.","liveLink":"https://contact-keeper-c2md.onrender.com/","githubLink":"https://github.com/renebitter/contact_keeper","image":"contact-keeper.png","isFeatured":false,"content":"\n## Description\n\nThis is a MERN Fullstack project with authentication and CRUD functionality.\n\n## Key takeaways\n\nContext\n\n## Structure\n\nSee below the diagram for the project.\n\n### Diagram\n\n### Frontend Diagram\n\n<iframe style=\"border:none\" width=\"100%\" height=\"550\" src=\"https://whimsical.com/embed/GEMgrQWZ5gscedo2cdh96Y\"></iframe>\n\n### Backend Diagram\n\n<iframe style=\"border:none\" width=\"100%\" height=\"550\" src=\"https://whimsical.com/embed/1ABxrptfzwLarfi5YJKX2\"></iframe>\n<br />\n<br />\n"},{"slug":"github-finder","title":"Github Finder","tech":["React","Context"],"description":"Search for github users with Github API and React Context.","liveLink":"https://github-finder-54654564789731.netlify.app/","githubLink":"https://github.com/renebitter/github_finder","image":"github-finder.png","isFeatured":false,"content":"\n## Description\n\nUser searching app using Github API and context.\n\n## Key takeaways\n\nGithub API and Context\n\n## Diagram\n\n<iframe style=\"border:none\" width=\"100%\" height=\"550\" src=\"https://whimsical.com/embed/3ydfAoHb8JLrhs39izHDLr\"></iframe>\n"},{"slug":"message-logger","title":"Message Logger","tech":["React","Redux","MongoDB","Node","Express"],"description":"This is a fullstack MERN + Redux project with CRUD functionality.","liveLink":"https://it-logger-full-stack.onrender.com/","githubLink":"https://github.com/renebitter/it-logger-full-stack","image":"it-logger.png","isFeatured":false,"content":"\n## Description\n\nFullstack MERN + Redux project with CRUD functionality.\n\n- Adds/deletes logs & users\n- Lists logs/users\n\n## Key takeaways\n\nRedux\n\n## Structure\n\nSee below the diagram for the project.\n\n### Diagram\n\n### Frontend Diagram\n\n<iframe style=\"border:none\" width=\"100%\" height=\"550\" src=\"https://whimsical.com/embed/6HhUtBd9MPuW2Q5dRBwkGp\"></iframe>\n\n### Backend Diagram\n\n<iframe style=\"border:none\" width=\"100%\" height=\"550\" src=\"https://whimsical.com/embed/8nz7fA3xLm9Go5eATXQBxq\"></iframe>\n<br />\n<br />\n"},{"slug":"nextjs-auth","title":"Next.js Authentication","tech":["React","Next.js"],"description":"Next.js project using next-auth library and JWT to handle authentication.","liveLink":"https://nextjs-authentication-eight.vercel.app/","githubLink":"https://github.com/renebitter/nextjs-authentication","image":"nextjs-auth.png","isFeatured":false,"content":"\n## Description\n\nProject built using next-auth library to handle authentication.\n\n- SessionProvider\n- useSession\n- getSession\n- CredentialsProvider\n- JWT & bcryptjs (for password hashing)\n- Mongodb\n- HTTP requests sent using fetch\n\n### Next-auth:\n\n- 'SessionProvider'\n  Contains the 'session context' and is exposed at the top level of the application '\\_app.js'.\n  'SessionProvider session={pageProps.session}' This will skip the 'session http request' on 'profile.js' since it's provided by 'getServerSideProps(context)' on 'profile.js'.\n  'auth.js' will send this 'session http request' since it does not have a 'getServerSideProps(context)'.\n\n- 'useSession()'\n  Frontend - Add React Hook. Checks if someone is signed in. Used in 'main-navigation.js' component.\n\n- 'getSession()'\n  Backend - Used to protect the API Route.\n\n- 'CredentialsProvider'\n  Manages token creation behind the scenes, 'JWT' (JSON Web Token), used in '/api/auth/[...nextauth]'.\n  Needs to be a 'catch all route' because 'next-auth' exposes multiple routes for login, logout and others more.\n\n  <sup>_List of 'next-auth' exposed routes (**that should not be overwritten by your custom ones**): [https://next-auth.js.org/getting-started/rest-api](https://next-auth.js.org/getting-started/rest-api)._</sup>\n  <sup>_Other providers overview: [https://next-auth.js.org/providers/](https://next-auth.js.org/providers/)_</sup>\n\n#### Next:\n\n- 'getServerSideProps()' fetches data from server on each request. Needed for 'profile.js' page, since it needs to verify if the user is authorized. It also redirects the user from 'profile.js' to 'auth.js' if the user is not authorized, thus keeping 'profile.js' only visible to authorized users.\n\n- 'useRouter()' for redirects. (e.g.: after login/logout 'router.replace('/')').\n\n#### React:\n\n- 'useRef()' for capturing input in forms (e.g.: e-mail, password, etc.)\n\n- 'useState()' for setting and using state (e.g.: loading, error messages, request status like 'pending/success/error')\n\n- 'useEffect()' for setting timeout (e.g.: notification); check for session/authentication 'auth.js'\n\n#### Others:\n\n- 'bcryptjs' used for hashing and comparing passwords.\n\n- 'MongoClient' for database connection.\n\n#### HTTP requests sent using 'fetch':\n\n- 'POST' to send login data.\n\n- 'PATCH' to change password.\n\n#### Observations/Improvements:\n\n- 'getStaticProps()' could be implemented for additional content like a list of products and 'getStaticPaths()' for accounting for dynamic pages with e.g. PDP (product detail pages). This would be outside of the scope of this 'next-auth' project though.\n\n#### Misc:\n\nSetting an 'input' 'type' from '\"password\"' to '\"text\"' shows the typed in password.\n\n##### 'getServerSideProps()' 'redirect'\n\nOnly redirects after reloading the page or explicitly typing the URL. Thus the need to define the redirect in the component to redirect it automatically after login.\n\n'getServerSideProps()' example! on 'auth.js' page, in an attempt to redirect to 'profile.js' page after logging in. Doesn't work.\n"},{"slug":"nextjs-blog","title":"Blog","tech":["React","Next.js","Markdown","MongoDB"],"description":"Blog posts written in markdown and rendered with react-markdown.","liveLink":"https://nextjs-blog-renebitter.vercel.app/","githubLink":"https://github.com/renebitter/nextjs-blog","image":"blog.png","isFeatured":false,"content":"\n## Description\n\nBlog posts written in markdown and rendered with \"react-markdown\".\nNotifications displayed via react portal through \"\\_document.js.\". Contact\nform using mongodb.\n"},{"slug":"react-resort","title":"Resort website","tech":["React","Context","Contentful"],"description":"Simple resort website with room listing and filter settings. ","liveLink":"https://react-resort-project.netlify.app/","githubLink":"https://github.com/renebitter/react_resort","image":"resort.png","isFeatured":false,"content":"\n## Description\n\nSimple resort website with room listing and filter settings. Used react\ncontext API for state management and Contentful for content (image, text)\ndelivery.\n\n## Key takeaways\n\nContentful and Context.\n"}]},"__N_SSG":true}